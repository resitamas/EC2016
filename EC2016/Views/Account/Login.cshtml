@using EC2016.Models
@using Microsoft.Owin.Security
@model LoginViewModel
@{
    ViewBag.Title = "Log in";
}

@section scripts {
    <script>
        function signInClicked() {

            document.getElementById('signinform').submit();
        }
    </script>
}

<h1 style="text-align:center; align-content:center">EB 2016 tippjáték</h1>
@*<h1 style="text-align:center; align-content:center">Bejelentkezés</h1>*@
<div style="text-align:center;">
    @using (Html.BeginForm("ExternalLogin", "Account", FormMethod.Post, new { id = "signinform" }))
    {
        //Html.AntiForgeryToken();
        var loginProviders = Context.GetOwinContext().Authentication.GetExternalAuthenticationTypes();
        foreach (AuthenticationDescription p in loginProviders)
        {
            if (p.Caption == "Facebook")
            {
                <input type="hidden" value="@p.AuthenticationType" name="provider" />
                <div style="width:180px; margin: 0 auto;">
                    <a href="#" class="btn btn-block btn-social btn-facebook" onclick="signInClicked() ">
                        <span class="fa fa-facebook"></span> Bejelentkezés
                    </a>
                </div>
            }
        }
        
    }
    
</div>

@*<div class="row">
    <div class="col-md-8">
        <section id="loginForm">
            @using (Html.BeginForm("Login", "Account", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
            {
                @Html.AntiForgeryToken()
                <h4>Use a local account to log in.</h4>
                <hr />
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="form-group">
                    @Html.LabelFor(m => m.Email, new { @class = "col-md-2 control-label" })
                    <div class="col-md-10">
                        @Html.TextBoxFor(m => m.Email, new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.Email, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.Password, new { @class = "col-md-2 control-label" })
                    <div class="col-md-10">
                        @Html.PasswordFor(m => m.Password, new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.Password, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <div class="checkbox">
                            @Html.CheckBoxFor(m => m.RememberMe)
                            @Html.LabelFor(m => m.RememberMe)
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Log in" class="btn btn-default" />
                    </div>
                </div>
                <p>
                    @Html.ActionLink("Register as a new user", "Register")
                </p>
                 Enable this once you have account confirmation enabled for password reset functionality
                    <p>
                        @Html.ActionLink("Forgot your password?", "ForgotPassword")
                    </p>
            }
        </section>
    </div>
    <div class="col-md-4">
        <section id="socialLoginForm">
            @Html.Partial("_ExternalLoginsListPartial", new ExternalLoginListViewModel { ReturnUrl = ViewBag.ReturnUrl })
        </section>
    </div>
</div>*@

@*@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}*@
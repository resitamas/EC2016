@using EC2016.Models;
@using System;
@model IndexModel

@functions {

    public PlayerStatModel GetPlayerStatsFromGuesses(List<GuessModel> guesses, bool isMax = false)
    {
        PlayerStatModel playerStats = new PlayerStatModel();
        playerStats.Count = guesses.Count;
        playerStats.Max = isMax;

        foreach (var guess in guesses)
        {
            MatchModel match = Model.Matches.Where(m => m.Id == guess.MatchId).First();

            if (match.HomeScore.HasValue) //game has been playing
            {
                if (match.HomeScore.Value == guess.HomeScore && match.AwayScore.Value == guess.AwayScore)
                {
                    playerStats.TT++;
                    playerStats.GK++;
                    playerStats.MK++;
                    playerStats.CSG++;
                    playerStats.OG++;
                    playerStats.TTPoint += Bll.GuessPoint.TTPoint;
                }
                else
                {
                    bool isGK = false;
                    if (Math.Abs(match.HomeScore.Value - match.AwayScore.Value) == Math.Abs(guess.HomeScore - guess.AwayScore) &&
                        ((match.HomeScore.Value > match.AwayScore.Value && guess.HomeScore > guess.AwayScore)
                        || (match.HomeScore.Value <= match.AwayScore.Value && guess.HomeScore <= guess.AwayScore)))
                    {
                        playerStats.GK++;
                        isGK = true;
                    }

                    bool isMK = false;
                    if ((match.HomeScore.Value > match.AwayScore.Value && guess.HomeScore > guess.AwayScore) ||
                        (match.HomeScore.Value < match.AwayScore.Value && guess.HomeScore < guess.AwayScore) ||
                        (match.HomeScore.Value == match.AwayScore.Value && guess.HomeScore == guess.AwayScore))
                    {
                        playerStats.MK++;
                        isMK = true;
                    }

                    bool isCSG = false;
                    if (match.HomeScore.Value == guess.HomeScore || match.AwayScore.Value == guess.AwayScore)
                    {
                        playerStats.CSG++;
                        isCSG = true;
                        //if (isMK)
                        //{
                        //    playerStats.Bonus += 2;
                        //}
                    }

                    bool isOG = false;
                    if (match.HomeScore.Value + match.AwayScore.Value == guess.HomeScore + guess.AwayScore)
                    {
                        playerStats.OG++;
                        isOG = true;
                    }

                    if (isMK && isCSG)
                    {
                        playerStats.MKCSGPoint += Bll.GuessPoint.MKCSGPoint;
                    }
                    else
                    {
                        if (isMK && isGK)
                        {
                            if (match.HomeScore.Value == match.AwayScore.Value)
                            {
                                playerStats.MKGKPoint += Bll.GuessPoint.DrawMKPoint;
                            }
                            else
                            {
                                playerStats.MKGKPoint += Bll.GuessPoint.MKGKPoint;
                            }
                        }
                        else
                        {
                            if (isMK && isOG)
                            {
                                playerStats.MKOGPoint += Bll.GuessPoint.MKOGPoint;
                            }
                            else
                            {
                                if (isMK)
                                {
                                    playerStats.MKPoint += Bll.GuessPoint.MKPoint;
                                }
                                else
                                {
                                    if (isCSG)
                                    {
                                        playerStats.CSGPoint += Bll.GuessPoint.CSGPoint;
                                    }
                                    else
                                    {
                                        if (isOG)
                                        {
                                            playerStats.OGPoint += Bll.GuessPoint.OGPoint;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }


        }

        return playerStats;

    }
}

<div class="black-text" style="font-size:11px; text-align:left; margin-left: 2px">
    @*<b>Telitalálat (TT): (10 pont)<br /> </b><span>Az eredmény tökéletes eltalálása</span><br />
    <b>Gólkülönbség eltalálása (GK): (6 pont)<br /></b><span>A két csapat által megszerzett gólok különbségének eltalálása (csak ha a győztest is helyesen tippeltük meg)</span><br />
    <b>Mérkőzés kimenetelének eltalálása (MK): (4 pont)<br /></b><span>A győztes csapat vagy a döntetlen eltalálása, 1-X-2, mint a TOTÓ-ban</span><br />
    <b>Az egyik csapat góljainak eltalálása (CSG): (3 pont)<br /> </b><span>Bármely csapat által szerzett gólok eltalálása</span><br />
    <b>Összes szerzett gól számának eltalálása (ÖG): (2 pont)<br /></b><span>A mérkőzésen született összes gól számának eltalálása</span><br />
    <br />
    <b>Tippelések száma (T):<br /></b><span>A játékos hány meccshez adott le tippet</span><br />
    <b>Pontszám (P):<br /></b><span>A játékosnak hány pontja van</span><br />*@
    <b>Telitalálat (TT): <br /> </b><span>Az eredmény tökéletes eltalálása</span><br />
    <b>Gólkülönbség eltalálása (GK): <br /></b><span>A két csapat által megszerzett gólok különbségének eltalálása (csak ha a győztest is helyesen tippeltük meg)</span><br />
    <b>Mérkőzés kimenetelének eltalálása (MK): <br /></b><span>A győztes csapat vagy a döntetlen eltalálása, 1-X-2, mint a TOTÓ-ban</span><br />
    <b>Az egyik csapat góljainak eltalálása (CSG):<br /> </b><span>Bármely csapat által szerzett gólok eltalálása</span><br />
    <b>Összes szerzett gól számának eltalálása (ÖG):<br /></b><span>A mérkőzésen született összes gól számának eltalálása</span><br />
    <br />
    <b>Tippelések száma (T):<br /></b><span>A játékos hány meccshez adott le tippet</span><br />
    <b>Pontszám (P):<br /></b><span>A játékosnak hány pontja van</span><br />
</div>
<br />

<table class="black-text" border="1" style="margin: 0 auto;">
    <tr>
        <th style="width:30px; max-width:30px; text-align:center">H</th>
        <th style="width:125px; max-width:125px; text-align:center">Játékos</th>
        <th style="width:35px; max-width:35px; text-align:center">T</th>
        <th style="width:35px; max-width:35px; text-align:center">TT</th>
        <th style="width:35px; max-width:35px; text-align:center">GK</th>
        <th style="width:35px; max-width:35px; text-align:center">MK</th>
        <th style="width:35px; max-width:35px; text-align:center">CSG</th>
        <th style="width:35px; max-width:35px; text-align:center">ÖG</th>
        <th style="width:35px; max-width:35px; text-align:center">P</th>
    </tr>

    @{ List<PlayerStatModel> playerStatsModel = new List<PlayerStatModel>();}

    @foreach (var m in Model.UsersWithGuesses)
    {
        PlayerStatModel playerStats = GetPlayerStatsFromGuesses(m.Guesses.ToList(), false);
        playerStats.UserName = m.User.Name;
        playerStats.UserId = m.User.Id;
        playerStatsModel.Add(playerStats);
    }

    @{int i = 1;}
    @*@foreach (var m in playerStatsModel.OrderByDescending(p => p.Points).ThenByDescending(p => p.TT).ThenByDescending(p => p.GK).ThenByDescending(p => p.MK).ThenByDescending(p => p.CSG).ThenByDescending(p => p.OG).ThenBy(p => p.Count).ThenBy(p => p.UserName))*@
    @foreach (var m in playerStatsModel.OrderByDescending(p => p.Points).ThenByDescending(p => p.TTPoint).ThenByDescending(p => p.MKGKPoint + p.MKCSGPoint).ThenByDescending(p => p.MKOGPoint).ThenByDescending(p => p.MKPoint).ThenByDescending(p => p.CSGPoint).ThenByDescending(p => p.OGPoint).ThenBy(p => p.Count).ThenBy(p => p.UserName))
    {
        if (m.UserId == ViewBag.user.Id)
        {
            <tr class="red-text">
                <td>@(i++)</td>
                <td style="width:35px; max-width:35px; word-break:break-word">@m.UserName</td>
                <td>@m.Count</td>
                <td>@m.TT</td>
                <td>@m.GK</td>
                <td>@m.MK</td>
                <td>@m.CSG</td>
                <td>@m.OG</td>
                <td>@m.Points</td>
            </tr>
        }
        else
        {
            <tr>
                <td>@(i++)</td>
                <td>@m.UserName</td>
                <td>@m.Count</td>
                <td>@m.TT</td>
                <td>@m.GK</td>
                <td>@m.MK</td>
                <td>@m.CSG</td>
                <td>@m.OG</td>
                <td>@m.Points</td>
            </tr>
        }
    }

</table>
<br />

<div class="black-text" style="font-size:11px; text-align:left; margin-left: 2px">
    <b>TT: </b>@Bll.GuessPoint.TTPoint pont<br />
    <b>MK+CSG: </b>@Bll.GuessPoint.MKGKPoint pont<br />
    <b>MK+GK:(nem döntetlen esetén) </b>@Bll.GuessPoint.MKCSGPoint pont<br />
    <b>MK+GK:(döntetlen esetén) </b>@Bll.GuessPoint.DrawMKPoint pont<br />
    <b>MK+ÖG </b>@Bll.GuessPoint.MKOGPoint pont<br />
    @*<b>GK: </b>6 pont <br />*@
    <b>MK: </b>@Bll.GuessPoint.MKPoint pont<br />
    <b>CSG: </b>@Bll.GuessPoint.CSGPoint pont<br />
    <b>ÖG: </b>@Bll.GuessPoint.OGPoint pont<br />
</div>


@using EC2016.Models;
@using EC2016.Helper;
@using System;
@model IndexModel

@functions {

    public int GetUserPositionChange(string userId, List<PlayerStatModel> now, List<PlayerStatModel> before)
    {
        int indexBefore = before.IndexOf(before.Where(b => b.UserId == userId).First());
        int indexNow = now.IndexOf(now.Where(b => b.UserId == userId).First());

        return indexNow - indexBefore;

        //return indexBefore.CompareTo(indexNow);
    }


    //public PlayerStatModel GetPlayerStatsFromGuesses(List<GuessModel> guesses, bool isMax = false)
    //{
    //    PlayerStatModel playerStats = new PlayerStatModel();
    //    playerStats.Count = guesses.Count;
    //    playerStats.Max = isMax;

    //    foreach (var guess in guesses)
    //    {
    //        MatchModel match = Model.Matches.Where(m => m.Id == guess.MatchId).First();

    //        if (match.HomeScore.HasValue) //game has been playing
    //        {
    //            if (match.HomeScore.Value == guess.HomeScore && match.AwayScore.Value == guess.AwayScore)
    //            {
    //                playerStats.TT++;
    //                //playerStats.GK++;
    //                //playerStats.MK++;
    //                //playerStats.CSG++;
    //                //playerStats.OG++;
    //                playerStats.TTPoint += Bll.GuessPoint.TTPoint;
    //            }
    //            else
    //            {
    //                bool isGK = false;
    //                if (Math.Abs(match.HomeScore.Value - match.AwayScore.Value) == Math.Abs(guess.HomeScore - guess.AwayScore) &&
    //                    ((match.HomeScore.Value > match.AwayScore.Value && guess.HomeScore > guess.AwayScore)
    //                    || (match.HomeScore.Value <= match.AwayScore.Value && guess.HomeScore <= guess.AwayScore)))
    //                {
    //                    //playerStats.GK++;
    //                    isGK = true;
    //                }

    //                bool isMK = false;
    //                if ((match.HomeScore.Value > match.AwayScore.Value && guess.HomeScore > guess.AwayScore) ||
    //                    (match.HomeScore.Value < match.AwayScore.Value && guess.HomeScore < guess.AwayScore) ||
    //                    (match.HomeScore.Value == match.AwayScore.Value && guess.HomeScore == guess.AwayScore))
    //                {
    //                    //playerStats.MK++;
    //                    isMK = true;
    //                }

    //                bool isCSG = false;
    //                if (match.HomeScore.Value == guess.HomeScore || match.AwayScore.Value == guess.AwayScore)
    //                {
    //                    //playerStats.CSG++;
    //                    isCSG = true;
    //                    //if (isMK)
    //                    //{
    //                    //    playerStats.Bonus += 2;
    //                    //}
    //                }

    //                bool isOG = false;
    //                if (match.HomeScore.Value + match.AwayScore.Value == guess.HomeScore + guess.AwayScore)
    //                {
    //                    //playerStats.OG++;
    //                    isOG = true;
    //                }

    //                if (isMK && isCSG)
    //                {
    //                    playerStats.MKCSGPoint += Bll.GuessPoint.MKCSGPoint;
    //                    playerStats.MKCSG++;
    //                }
    //                else
    //                {
    //                    if (isMK && isGK)
    //                    {
    //                        if (match.HomeScore.Value == match.AwayScore.Value)
    //                        {
    //                            playerStats.MKGKPoint += Bll.GuessPoint.DrawMKPoint;
    //                            playerStats.MKGKDraw++;
    //                        }
    //                        else
    //                        {
    //                            playerStats.MKGKPoint += Bll.GuessPoint.MKGKPoint;
    //                            playerStats.MKGK++;
    //                        }
    //                    }
    //                    else
    //                    {
    //                        if (isMK && isOG)
    //                        {
    //                            playerStats.MKOGPoint += Bll.GuessPoint.MKOGPoint;
    //                            playerStats.MKOG++;
    //                        }
    //                        else
    //                        {
    //                            if (isMK)
    //                            {
    //                                playerStats.MKPoint += Bll.GuessPoint.MKPoint;
    //                                playerStats.MK++;
    //                            }
    //                            else
    //                            {
    //                                if (isCSG)
    //                                {
    //                                    playerStats.CSGPoint += Bll.GuessPoint.CSGPoint;
    //                                    playerStats.CSG++;
    //                                }
    //                                else
    //                                {
    //                                    if (isOG)
    //                                    {
    //                                        playerStats.OGPoint += Bll.GuessPoint.OGPoint;
    //                                        playerStats.OG++;
    //                                    }
    //                                }
    //                            }
    //                        }
    //                    }
    //                }
    //            }
    //        }


    //    }

    //    return playerStats;

    //}
}

<div class="black-text" style="font-size:11px; text-align:center; margin-left: 2px">
    @*<b>Telitalálat (TT): (10 pont)<br /> </b><span>Az eredmény tökéletes eltalálása</span><br />
    <b>Gólkülönbség eltalálása (GK): (6 pont)<br /></b><span>A két csapat által megszerzett gólok különbségének eltalálása (csak ha a győztest is helyesen tippeltük meg)</span><br />
    <b>Mérkőzés kimenetelének eltalálása (MK): (4 pont)<br /></b><span>A győztes csapat vagy a döntetlen eltalálása, 1-X-2, mint a TOTÓ-ban</span><br />
    <b>Az egyik csapat góljainak eltalálása (CSG): (3 pont)<br /> </b><span>Bármely csapat által szerzett gólok eltalálása</span><br />
    <b>Összes szerzett gól számának eltalálása (ÖG): (2 pont)<br /></b><span>A mérkőzésen született összes gól számának eltalálása</span><br />
    <br />
    <b>Tippelések száma (T):<br /></b><span>A játékos hány meccshez adott le tippet</span><br />
    <b>Pontszám (P):<br /></b><span>A játékosnak hány pontja van</span><br />*@
    <b>Telitalálat (TT): <br /> </b><span>Az eredmény tökéletes eltalálása</span><br />
    <b>Mérkőzés kimenetelének eltalálása (MK + CSG): <br /></b><span>A győztes és az egyik csapat által rúgott gólok számának eltalálása</span><br />
    <b>Győztes és gólkülönbség eltalálása (MK + GK): <br /></b><span>A győztes és a gólok különbségének eltalálása</span><br />
    <b>Győztes és gólkülönbség eltalálása döntetlen esetén(MK + GK (D)): <br /></b><span>Döntetlen eltalálása</span><br />
    <b>Mérkőzés kimenetelének eltalálása (MK + OG): <br /></b><span>A győztes és az összes rúgott gól számának eltalálása</span><br />
    <b>Mérkőzés kimenetelének eltalálása (MK): <br /></b><span>A győztes eltalálása</span><br />
    <b>Az egyik csapat góljainak eltalálása (CSG):<br /> </b><span>Bármely csapat által szerzett gólok eltalálása</span><br />
    <b>Összes szerzett gól számának eltalálása (ÖG):<br /></b><span>A mérkőzésen született összes gól számának eltalálása</span><br />
    <br />
    <b>Tippelések száma (T):<br /></b><span>A játékos hány meccshez adott le tippet</span><br />
    <b>Pontszám (P):<br /></b><span>A játékosnak hány pontja van</span><br />
    <b>Forma (F):<br /></b><span>A játékosnak hogyan alakult a pozíciója az utolsó 3 mérkőzés alatt</span><br />
    <b>Teljes homály (XX):<br /></b><span>A játékos ezekért a meccsekért nem kapott pontot</span><br />
</div>
<br />

<table id="gamestanding" class="black-text" @*border="1"*@ style="margin: 0 auto;">
    <tr>
        <td colspan="4" style="width:30px; max-width:30px; text-align:center;"></td>
        <td class="borderleftandtop width35">@Bll.GuessPoint.TTPoint</td>
        <td class="borderleftandtop width35">@Bll.GuessPoint.MKCSGPoint</td>
        <td class="borderleftandtop width35">@Bll.GuessPoint.MKGKPoint</td>
        <td class="borderleftandtop width35">@Bll.GuessPoint.DrawMKPoint</td>
        <td class="borderleftandtop width35">@Bll.GuessPoint.MKOGPoint</td>
        <td class="borderleftandtop width35">@Bll.GuessPoint.MKPoint</td>
        <td class="borderleftandtop width35">@Bll.GuessPoint.CSGPoint</td>
        <td class="borderleftandtopandright width35">@Bll.GuessPoint.OGPoint</td>
    </tr>
    <tr>
        <th class="borderleftandtop" style="width:30px; max-width:30px; text-align:center">H</th>
        <th class="borderleftandtop" style="width:40px; max-width:40px; text-align:center">F</th>
        <th class="borderleftandtop" style="width:125px; max-width:125px; text-align:center">Játékos</th>
        <th class="borderleftandtop width35">T</th>
        <th class="borderleftandtop width35">TT</th>
        <th class="borderleftandtop width35" style="word-break:break-word;">MK + CSG</th>
        <th class="borderleftandtop width35" style="word-break:break-word;">MK + GK</th>
        <th class="borderleftandtop width35" style="word-break:break-word;">MK + GK (D)</th>
        <th class="borderleftandtop width35" style="word-break:break-word;">MK + OG</th>
        <th class="borderleftandtop width35">MK</th>
        <th class="borderleftandtop width35">CSG</th>
        <th class="borderleftandtop width35">ÖG</th>
        <th class="borderleftandtop width35">XX</th>
        <th class="borderleftandtopandright width35">P</th>
    </tr>

    @{ 
        List<PlayerStatModel> playerStatsModel = new List<PlayerStatModel>();
        List<PlayerStatModel> playerStatsModelBefore = new List<PlayerStatModel>();

        foreach (var m in Model.UsersWithGuessesAndStats)
        {
            PlayerStatModel playerStats = m.PlayerStats;
            playerStats.UserName = m.User.Name;
            playerStats.UserId = m.User.Id;
            playerStatsModel.Add(playerStats);

            PlayerStatModel playerStatsBefore = m.PlayerStatsBefore;
            playerStatsBefore.UserName = m.User.Name;
            playerStatsBefore.UserId = m.User.Id;
            playerStatsModelBefore.Add(playerStatsBefore);
        }

        int i = 1;
        playerStatsModel = playerStatsModel.OrderByDescending(p => p.Points).ThenByDescending(p => p.TTPoint).ThenByDescending(p => p.MKGKPoint + p.MKCSGPoint).ThenByDescending(p => p.MKOGPoint).ThenByDescending(p => p.MKPoint).ThenByDescending(p => p.CSGPoint).ThenByDescending(p => p.OGPoint).ThenBy(p => p.Count).ThenBy(p => p.UserName).ToList();
        playerStatsModelBefore = playerStatsModelBefore.OrderByDescending(p => p.Points).ThenByDescending(p => p.TTPoint).ThenByDescending(p => p.MKGKPoint + p.MKCSGPoint).ThenByDescending(p => p.MKOGPoint).ThenByDescending(p => p.MKPoint).ThenByDescending(p => p.CSGPoint).ThenByDescending(p => p.OGPoint).ThenBy(p => p.Count).ThenBy(p => p.UserName).ToList();
    }
    @*@foreach (var m in playerStatsModel.OrderByDescending(p => p.Points).ThenByDescending(p => p.TT).ThenByDescending(p => p.GK).ThenByDescending(p => p.MK).ThenByDescending(p => p.CSG).ThenByDescending(p => p.OG).ThenBy(p => p.Count).ThenBy(p => p.UserName))*@
    @foreach (var m in playerStatsModel)
    {
        if (m.UserId == ViewBag.user.Id)
        {
            int positionChange = -1 * GetUserPositionChange(m.UserId, playerStatsModel, playerStatsModelBefore);

            <tr class="red-text" data="@m.UserId">
                <td class="borderleftandtop" >@(i++)</td>
                <td class="borderleftandtop">
                    <div class="@(positionChange > 0 ? "blue-text" : (positionChange < 0 ? "red-text" : "yellow-text"))">
                        <div class="@(positionChange > 0 ? "triangle-up" : (positionChange < 0 ? "triangle-down" : "rectangle"))" style="text-align:center; display:inline-block">
                        </div>
                        @if (positionChange != 0)
                        {
                            <span>@Math.Abs(positionChange)</span>
                        }
                    </div>
                </td>
                <td id="userName" class="borderleftandtop" style="width:35px; max-width:35px; word-break:break-word">@m.UserName</td>
                <td class="borderleftandtop">@m.Count</td>
                <td class="tooltips borderleftandtop" data="@ModelHelper.GuessType.TT">@m.TT</td>
                <td class="tooltips borderleftandtop " data="@ModelHelper.GuessType.MKCSG">@m.MKCSG</td>
                <td class="tooltips borderleftandtop" data="@ModelHelper.GuessType.MKGK">@m.MKGK</td>
                <td class="tooltips borderleftandtop" data="@ModelHelper.GuessType.MKGKD">@m.MKGKDraw</td>
                <td class="tooltips borderleftandtop" data="@ModelHelper.GuessType.MKOG">@m.MKOG</td>
                <td class="tooltips borderleftandtop" data="@ModelHelper.GuessType.MK">@m.MK</td>
                <td class="tooltips borderleftandtop" data="@ModelHelper.GuessType.CSG">@m.CSG</td>
                <td class="tooltips borderleftandtop" data="@ModelHelper.GuessType.OG">@m.OG</td>
                <td class="tooltips borderleftandtop" data="@ModelHelper.GuessType.NONE">@m.NONE</td>
                <td class="borderleftandtopandright">@m.Points</td>
            </tr>
        }
        else
        {
            int positionChange = -1 * GetUserPositionChange(m.UserId, playerStatsModel, playerStatsModelBefore);

            <tr data="@m.UserId">

                <td class="borderleftandtop">@(i++)</td>
                <td class="borderleftandtop">
                    <div class="@(positionChange > 0 ? "blue-text" : (positionChange < 0 ? "red-text" : "yellow-text"))">
                        <div class="@(positionChange > 0 ? "triangle-up" : (positionChange < 0 ? "triangle-down" : "rectangle"))" style="text-align:center; display:inline-block">
                        </div>
                        @if (positionChange != 0)
                        {
                            <span>@Math.Abs(positionChange)</span>
                        }
                    </div>
                </td>
                <td id="userName" class="borderleftandtop" style="width:35px; max-width:35px; word-break:break-word">@m.UserName</td>
                <td class="borderleftandtop">@m.Count</td>
                <td class="tooltips borderleftandtop" data="@ModelHelper.GuessType.TT">@m.TT</td>
                <td class="tooltips borderleftandtop " data="@ModelHelper.GuessType.MKCSG">@m.MKCSG</td>
                <td class="tooltips borderleftandtop" data="@ModelHelper.GuessType.MKGK">@m.MKGK</td>
                <td class="tooltips borderleftandtop" data="@ModelHelper.GuessType.MKGKD">@m.MKGKDraw</td>
                <td class="tooltips borderleftandtop" data="@ModelHelper.GuessType.MKOG">@m.MKOG</td>
                <td class="tooltips borderleftandtop" data="@ModelHelper.GuessType.MK">@m.MK</td>
                <td class="tooltips borderleftandtop" data="@ModelHelper.GuessType.CSG">@m.CSG</td>
                <td class="tooltips borderleftandtop" data="@ModelHelper.GuessType.OG">@m.OG</td>
                <td class="tooltips borderleftandtop" data="@ModelHelper.GuessType.NONE">@m.NONE</td>
                <td class="borderleftandtopandright">@m.Points</td>
            </tr>
        }
    }

</table>
<br />

@*<div class="black-text" style="font-size:11px; text-align:left; margin-left: 2px">
    <b>TT: </b>@Bll.GuessPoint.TTPoint pont<br />
    <b>MK+CSG: </b>@Bll.GuessPoint.MKGKPoint pont<br />
    <b>MK+GK:(nem döntetlen esetén) </b>@Bll.GuessPoint.MKCSGPoint pont<br />
    <b>MK+GK:(döntetlen esetén) </b>@Bll.GuessPoint.DrawMKPoint pont<br />
    <b>MK+ÖG </b>@Bll.GuessPoint.MKOGPoint pont<br />
    <b>MK: </b>@Bll.GuessPoint.MKPoint pont<br />
    <b>CSG: </b>@Bll.GuessPoint.CSGPoint pont<br />
    <b>ÖG: </b>@Bll.GuessPoint.OGPoint pont<br />
</div>*@


